#VRML_SIM R2023a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A configurable circle arena composed of floor surrounded by wall.
# template language: javascript

EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023a/projects/appearances/protos/Parquetry.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023a/projects/appearances/protos/BrushedAluminium.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023a/projects/objects/solids/protos/SolidPipe.proto"

PROTO CircleArena [
  field SFVec3f translation -0.5 0 0 # Is `Transform.translation`.
  field SFRotation rotation 0 0 1 0 # Is `Transform.rotation`.
  field SFString name "e-puck" # Is `Solid.name`.
  field SFString controller "<generic>"
  field MFString controllerArgs [] # Is `Robot.controllerArgs`.
  field SFString window "<generic>"
  field SFString customData "" # Is `Robot.customData`.
  field SFBool supervisor FALSE # Is `Robot.supervisor`.
  field SFBool synchronization TRUE # Is `Robot.synchronization`.
  field MFFloat battery [] # Is `Robot.battery`.
  field SFString{"1", "2"} version "1" # Defines the e-puck version; either "1" or "2".
  field SFFloat camera_fieldOfView 0.84 # Is `Camera.fieldOfView`.
  field SFInt32 camera_width 52 # Is `Camera.width`.
  field SFInt32 camera_height 39 # Is `Camera.height`.
  field SFBool camera_antiAliasing FALSE # Is `Camera.antiAliasing`.
  field SFRotation camera_rotation 0 0 1 0 # Is `Camera.rotation`. Interesting setup: set `0 1 0 0.47` in order to simulate the linear camera mode.
  field SFFloat camera_noise 0.0 # Is `Camera.noise`.
  field SFFloat camera_motionBlur 0.0 # Is `Camera.motionBlur`.
  field SFInt32 distance_sensor_numberOfRays 1 # Is `DistanceSensor.numberOfRays`.
  field SFInt32 emitter_channel 1 # Is `Emitter.channel`.
  field SFInt32 receiver_channel 1 # Is `Receiver.channel`.
  field MFNode turretSlot [] # Extends the robot with new nodes in the turret slot.
  field MFNode groundSensorsSlot [] # Extends the robot with new nodes in the ground slot. Typically: `E-puckGroundSensors.proto`.
  field SFBool kinematic FALSE # Defines whether the robot motion and its sensors are computed according to a 2D kinematics algorithm.
]
{
  %<
    import * as wbgeometry from 'wbgeometry.js';

    if (fields.floorTextureUrl.value[0] !== fields.floorTextureUrl.defaultValue[0])
      console.error('The \'floorTextureUrl\' field is deprecated, using the new \'floorAppearance\' field instead.');

    if (fields.wallTextureUrl.value[0] !== fields.wallTextureUrl.defaultValue[0])
      console.error('The \'wallTextureUrl\' field is deprecated, using the new \'wallAppearance\' field instead.');

    const wallTileSize = fields.wallTileSize.value;
    if (wallTileSize.x !== fields.wallTileSize.defaultValue.x || wallTileSize.y !== fields.wallTileSize.defaultValue.y)
      console.error('The \'wallTileSize\' field is deprecated, using the new \'wallApperance\' field instead.');

    let subdivision = fields.subdivision.value;
    if (subdivision <= 8) {
      console.error('\'subdivision\' must be greater than 8. Using 8 instead.');
      subdivision = 8;
    }

    let radius = fields.radius.value;
    if (radius <= 0) {
      radius = fields.radius.defaultValue;
      console.error('\'radius\' must be strictly positive. Value reset to ' + radius + '.');
    }

    let wallThickness = fields.wallThickness.value;
    if (wallThickness <= 0) {
      wallThickness = fields.wallThickness.defaultValue;
      console.error('\'wallThickness\' must be strictly positive. Value reset to ' + wallThickness + '.');
    }

    let wallHeight = fields.wallHeight.value;
    if (wallHeight <= 0) {
      wallHeight = fields.wallHeight.defaultValue;
      console.error('\'wallHeight\' must be strictly positive. Value reset to ' + wallHeight + '.');
    }

    const realRadius = radius + wallThickness * 0.5;

    let floorTextureScale = {x: 1, y: 1};
    if (fields.floorTileSize.value.x >= 0 && fields.floorTileSize.value.y >= 0.0) { // avoid a zero division and negative values
      floorTextureScale.x =  fields.floorTileSize.value.x;
      floorTextureScale.y =  fields.floorTileSize.value.y;
    } else
      console.error('\'floorTextureScale\' must contain positive values.');
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      SolidPipe {
        translation 0 0 %<= wallHeight / 2 >%
        height %<= wallHeight >%
        radius %<= radius + wallThickness >%
        thickness %<= wallThickness >%
        subdivision %<= subdivision >%
        contactMaterial IS contactMaterial
        appearance IS wallAppearance
      }
      Shape {
        appearance IS floorAppearance
        geometry IndexedFaceSet {
          %< const circle = wbgeometry.circle(realRadius, subdivision, {x: 0, y: 0}, 0); >%
          coord Coordinate {
            point [
              %< for (let i = 0; i < circle.length; ++i) { >%
                %<= circle[i].x >% %<= circle[i].y >% %<= 0 >%
              %< } >%
            ]
          }
          texCoord TextureCoordinate {
            point [
              %< for (let i = 0; i < circle.length; ++i) { >%
                %<= circle[i].x / floorTextureScale.x >% %<= circle[i].y / floorTextureScale.y>%
              %< } >%
            ]
          }
          coordIndex [
            %< for (let j = 0; j < subdivision; ++j) { >%
               0 %<= j >% %<= j + 1 >% -1
            %< } >%
          ]
          texCoordIndex [
            %< for (let j = 0; j < subdivision; ++j) { >%
               0 %<= j >% %<= j + 1 >% -1
            %< } >%
          ]
        }
      }
    ]
    name IS name
    model "circle arena"
    boundingObject Plane {
      size %<= 2 * radius >% %<= 2 * radius >%
    }
    contactMaterial IS contactMaterial
    locked TRUE
  }
}
